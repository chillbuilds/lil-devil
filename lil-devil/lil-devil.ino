#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

#define i2c_Address 0x3c

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1   //   QT-PY / XIAO
Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const unsigned char splash_screen [] PROGMEM = {
  // 'splash-screen-test, 64x128px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x04, 0x20, 0x00, 0x02, 0x01, 0x9f, 0xc0, 0x1e, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x3f, 0xe5, 0x18, 0x04, 0x20, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x0b, 0x0f, 0xe0, 0x00, 0x04, 0x20, 0x00, 0x12, 0x00, 0x3f, 0xe0, 0x00, 0x04,
  0x20, 0x10, 0x00, 0x09, 0x3f, 0xe0, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x10, 0x1f, 0xc0, 0x03, 0xe4, 0x20, 0x00, 0x00, 0x00, 0x07, 0x80, 0x3f, 0xe4,
  0x20, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xff, 0xe4, 0x20, 0x00, 0x00, 0x1f, 0xff, 0x3f, 0xff, 0x84,
  0x20, 0x00, 0x03, 0xff, 0xbf, 0xff, 0xf8, 0x04, 0x20, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x04,
  0x20, 0x00, 0xff, 0xfd, 0xfe, 0xf8, 0x00, 0x14, 0x20, 0x00, 0xff, 0x81, 0xcf, 0xe0, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x03, 0x84, 0x20, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x04, 0x20, 0x00, 0x00, 0x0f, 0xfe, 0xc0, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x04, 0x30, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x04,
  0x20, 0x2a, 0x00, 0x03, 0xff, 0xc6, 0x00, 0x04, 0x20, 0x00, 0x0d, 0x00, 0x7f, 0xc0, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x04, 0x7f, 0x80, 0x00, 0x04, 0x20, 0x00, 0x07, 0xf8, 0xff, 0xa0, 0x00, 0x04,
  0x21, 0x00, 0x7f, 0xff, 0xff, 0x80, 0xf0, 0x04, 0x20, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0x04,
  0x20, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x04, 0x20, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x04,
  0x20, 0x3f, 0xfc, 0x01, 0xfe, 0x08, 0x00, 0x04, 0x20, 0x3f, 0xe0, 0x03, 0xfc, 0x00, 0x00, 0x04,
  0x20, 0x3f, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x9f, 0xe0, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x28, 0x00, 0x1f, 0x30, 0x00, 0x00, 0x04, 0x20, 0x00, 0xc0, 0x1f, 0x80, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x01, 0x07, 0x80, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x13, 0x80, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x87, 0xc0, 0x08, 0x00, 0x04, 0x20, 0x00, 0x00, 0x07, 0xe0, 0x00, 0xa0, 0x04,
  0x20, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x0f, 0x04, 0x20, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x04, 0x20, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x04, 0x20, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x60, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x80, 0x60, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x04,
  0x20, 0x0f, 0xe6, 0x39, 0xf1, 0xcf, 0xe0, 0x04, 0x20, 0x0f, 0xe7, 0x73, 0xf9, 0xdf, 0xe0, 0x04,
  0x20, 0x1c, 0x63, 0xe7, 0x19, 0xdc, 0x60, 0x04, 0x20, 0x1c, 0x63, 0xe7, 0x1d, 0xdc, 0x60, 0x04,
  0x20, 0x1c, 0x61, 0xc7, 0x19, 0xdc, 0x60, 0x04, 0x20, 0x0f, 0xe1, 0xc3, 0xf9, 0xdf, 0xe0, 0x04,
  0x20, 0x0f, 0xe0, 0x81, 0xf1, 0xcf, 0xe0, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0xc0, 0x00, 0x06, 0x00, 0x04,
  0x20, 0x00, 0x00, 0xc0, 0x00, 0x06, 0x00, 0x04, 0x20, 0x00, 0x00, 0xc0, 0x20, 0x06, 0x00, 0x04,
  0x20, 0x00, 0x38, 0xc0, 0x70, 0x06, 0x00, 0x04, 0x20, 0x00, 0x38, 0xc0, 0x20, 0x06, 0x00, 0x04,
  0x20, 0x00, 0x38, 0xc0, 0x00, 0x06, 0x00, 0x04, 0x20, 0x00, 0x7c, 0xfe, 0x73, 0xe6, 0x00, 0x04,
  0x20, 0x00, 0x7c, 0xfe, 0x73, 0x26, 0x00, 0x04, 0x20, 0x00, 0x38, 0xe6, 0x73, 0xc6, 0x00, 0x04,
  0x20, 0x00, 0x38, 0xe6, 0x73, 0xe6, 0x00, 0x04, 0x20, 0x00, 0x38, 0xc6, 0x70, 0xe0, 0x00, 0x04,
  0x20, 0x00, 0x38, 0xc6, 0x73, 0xee, 0x00, 0x04, 0x20, 0x00, 0x38, 0xc6, 0x73, 0xee, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x04, 0x20, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char food_icon [] PROGMEM = {
  // 12x12px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x20, 0x40, 0x40, 0x20, 0x7f, 0xe0, 0x3f, 0xc0,
  0x3f, 0xc0, 0x40, 0x20, 0x7f, 0xe0, 0x00, 0x00
};
const unsigned char poo_icon [] PROGMEM = {
  // 12x12px
  0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x07, 0x00, 0x09, 0x00, 0x1f, 0x80, 0x20, 0x40, 0x3f, 0xc0,
  0x40, 0x20, 0x40, 0x20, 0x3f, 0xc0, 0x00, 0x00
};
const unsigned char play_icon [] PROGMEM = {
  // 12x12px
  0x00, 0x00, 0x30, 0x00, 0x48, 0x00, 0x48, 0x00, 0x33, 0x80, 0x4c, 0x40, 0x4a, 0xa0, 0x48, 0x20,
  0x48, 0xa0, 0x4c, 0x40, 0x33, 0x80, 0x00, 0x00
};
const unsigned char doctor_icon [] PROGMEM = {
  // 12x12px
  0x00, 0x00, 0x63, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x22, 0x00, 0x1c, 0x00, 0x08, 0xc0,
  0x09, 0x20, 0x05, 0x20, 0x03, 0xc0, 0x00, 0x00
};
const unsigned char sleep_icon [] PROGMEM = {
  // 12x12px
  0x00, 0x00, 0x01, 0xe0, 0x00, 0x20, 0x0f, 0x40, 0x01, 0x80, 0x7b, 0xe0, 0x0c, 0x00, 0x1f, 0x00,
  0x20, 0x00, 0x40, 0x00, 0x78, 0x00, 0x00, 0x00
};
const unsigned char stats_icon [] PROGMEM = {
  // 12x12px
  0x00, 0x00, 0x00, 0xc0, 0x00, 0xc0, 0x06, 0xc0, 0x06, 0xc0, 0x36, 0xc0, 0x36, 0xc0, 0x36, 0xc0,
  0x36, 0xc0, 0x7f, 0xe0, 0x7f, 0xe0, 0x00, 0x00
};
const unsigned char clock_icon [] PROGMEM = {
  // 12x12px
  0x00, 0x00, 0x0f, 0x00, 0x34, 0xc0, 0x24, 0x40, 0x45, 0x20, 0x46, 0x20, 0x44, 0x20, 0x40, 0x20,
  0x20, 0x40, 0x30, 0xc0, 0x0f, 0x00, 0x00, 0x00
};
const unsigned char devil [] PROGMEM = {
  // 32x32
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x70, 0x1c, 0x00, 
	0x00, 0xc0, 0x03, 0x00, 0x03, 0x00, 0x01, 0x80, 0x06, 0x00, 0x00, 0x40, 0x0c, 0x1e, 0x00, 0x20, 
	0x0c, 0x21, 0x00, 0x20, 0x18, 0x21, 0x0c, 0x10, 0x18, 0x21, 0x12, 0x10, 0x30, 0x21, 0x12, 0x08, 
	0x30, 0x1e, 0x0c, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x18, 0x2a, 0x80, 0x10, 
	0x18, 0x7f, 0xc0, 0x10, 0x0c, 0x2a, 0x80, 0x20, 0x0c, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00, 0x40, 
	0x03, 0x00, 0x01, 0x80, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x70, 0x1c, 0x00, 0x00, 0x0f, 0xf0, 0x00
};
const unsigned char devil_bounce_0 [] PROGMEM = {
  // 32x32
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x18, 0x3c, 0x00, 0x00, 0x38, 0x1e, 0x3f, 0xfc, 0xf8, 0x1f, 0xc0, 0x0f, 0xf0, 
	0x0f, 0x00, 0x01, 0xf0, 0x0c, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x18, 
	0x70, 0x00, 0x0c, 0x08, 0x60, 0x42, 0x12, 0x0c, 0xe0, 0x3c, 0x12, 0x04, 0xc0, 0x42, 0x0c, 0x06, 
	0xc0, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x06, 0xe0, 0x00, 0x00, 0x04, 
	0x60, 0x00, 0x00, 0x0c, 0x70, 0x2a, 0x80, 0x08, 0x30, 0x7f, 0xc0, 0x18, 0x18, 0x2a, 0x80, 0x30, 
	0x0c, 0x00, 0x00, 0x60, 0x07, 0x00, 0x01, 0xc0, 0x01, 0xc0, 0x0f, 0x00, 0x00, 0x3f, 0xfc, 0x00
};
const unsigned char devil_bounce_1 [] PROGMEM = {
  // 32x32
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x10, 0x0f, 0x0f, 0xf0, 0x30, 
	0x0f, 0xf0, 0x1c, 0xf0, 0x07, 0xc0, 0x03, 0xe0, 0x03, 0x00, 0x01, 0xe0, 0x02, 0x00, 0x00, 0xc0, 
	0x04, 0x3c, 0x00, 0x60, 0x0c, 0x42, 0x00, 0x30, 0x18, 0x42, 0x0c, 0x10, 0x18, 0x42, 0x12, 0x10, 
	0x10, 0x42, 0x12, 0x18, 0x30, 0x3c, 0x0c, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x08, 0x10, 0x2a, 0x80, 0x18, 0x18, 0x7f, 0xc0, 0x10, 0x18, 0x2a, 0x80, 0x10, 
	0x0c, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x01, 0x80, 
	0x00, 0xc0, 0x03, 0x00, 0x00, 0x70, 0x1c, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char devil_bounce_2 [] PROGMEM = {
  // 32x32
  0x0c, 0x00, 0x00, 0x30, 0x0e, 0x0f, 0xf0, 0xf0, 0x0f, 0xf0, 0x1f, 0xe0, 0x07, 0xc0, 0x03, 0xe0, 
	0x03, 0x00, 0x01, 0xc0, 0x06, 0x00, 0x00, 0x40, 0x0c, 0x3c, 0x00, 0x20, 0x0c, 0x42, 0x00, 0x20, 
	0x18, 0x42, 0x0c, 0x10, 0x18, 0x42, 0x12, 0x10, 0x30, 0x42, 0x12, 0x08, 0x30, 0x3c, 0x0c, 0x08, 
	0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x18, 0x2a, 0x80, 0x10, 0x18, 0x7f, 0xc0, 0x10, 
	0x0c, 0x2a, 0x80, 0x20, 0x0c, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00, 0x40, 0x03, 0x00, 0x01, 0x80, 
	0x00, 0xc0, 0x03, 0x00, 0x00, 0x70, 0x1c, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char* const bounce_bitmaps_lg[] PROGMEM = {
    devil_bounce_0,
    devil_bounce_1,
    devil_bounce_2,
    devil_bounce_1,
};

const unsigned char left_icon [] PROGMEM = {
  // 4x8
  0x10, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x10
};
const unsigned char right_icon [] PROGMEM = {
  // 4x8
  0x80, 0x40, 0x20, 0x10, 0x10, 0x20, 0x40, 0x80
};
const unsigned char stat_bar [] PROGMEM = {
  // stat-bar, 53x9px
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x4f, 0xf8,
  0xff, 0x8f, 0xf8, 0xff, 0x90, 0x98, 0x0d, 0x80, 0xd8, 0x0d, 0x80, 0xc8, 0x90, 0x05, 0x00, 0x50,
  0x05, 0x00, 0x48, 0x98, 0x0d, 0x80, 0xd8, 0x0d, 0x80, 0xc8, 0x4f, 0xf8, 0xff, 0x8f, 0xf8, 0xff,
  0x90, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0
};
const unsigned char stat_bar_full [] PROGMEM = {
  // stat-bar-fill, 9x3px
  0x7f, 0x00, 0xff, 0x80, 0x7f, 0x00
};
const unsigned char pear_icon [] PROGMEM = {
  // 'pear-icon, 32x32px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x60, 0x00, 0x00, 0x04, 0xe0, 0x00,
  0x00, 0x06, 0xa0, 0x00, 0x00, 0x03, 0xa0, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x01, 0xc0, 0x00,
  0x00, 0x07, 0xe0, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x10, 0x08, 0x00,
  0x00, 0x30, 0x0c, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x20, 0x06, 0x00,
  0x00, 0x60, 0x03, 0x00, 0x00, 0x40, 0x01, 0x80, 0x00, 0x80, 0x00, 0xc0, 0x01, 0x80, 0x00, 0x40,
  0x01, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0xc0,
  0x00, 0x80, 0x01, 0x80, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0x38, 0x38, 0x00,
  0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char cookie_icon [] PROGMEM = {
  // 'cookie-icon, 32x32px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x60, 0x0e, 0x00, 0x00, 0xc0, 0x03, 0x00,
  0x01, 0x81, 0x81, 0x80, 0x03, 0x02, 0x80, 0xc0, 0x06, 0x03, 0x00, 0x60, 0x04, 0x00, 0x00, 0x20,
  0x04, 0x00, 0x00, 0x30, 0x0c, 0x60, 0x01, 0x90, 0x08, 0xb0, 0x02, 0x98, 0x08, 0xb0, 0xc3, 0x88,
  0x08, 0xe1, 0xc0, 0x08, 0x0c, 0x00, 0x80, 0x08, 0x04, 0x00, 0x00, 0x18, 0x04, 0x00, 0x00, 0x10,
  0x02, 0x18, 0x70, 0x30, 0x03, 0x38, 0xc8, 0x60, 0x01, 0x30, 0xd8, 0xc0, 0x01, 0x80, 0x71, 0x80,
  0x00, 0x60, 0x06, 0x00, 0x00, 0x38, 0x18, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char pizza_icon [] PROGMEM = {
  // 'pizz-icon, 32x32px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00,
  0x06, 0x3f, 0xf8, 0x00, 0x04, 0x00, 0x07, 0xc0, 0x04, 0x00, 0x00, 0x40, 0x07, 0xff, 0xff, 0xc0,
  0x02, 0x00, 0x00, 0x80, 0x03, 0x0c, 0x00, 0x80, 0x01, 0x13, 0x00, 0x80, 0x00, 0x91, 0x38, 0x80,
  0x00, 0xdb, 0x24, 0x80, 0x00, 0x4e, 0x25, 0x00, 0x00, 0x60, 0x1d, 0x00, 0x00, 0x20, 0x01, 0x00,
  0x00, 0x30, 0x02, 0x00, 0x00, 0x10, 0xc2, 0x00, 0x00, 0x09, 0x22, 0x00, 0x00, 0x09, 0x24, 0x00,
  0x00, 0x0d, 0x64, 0x00, 0x00, 0x04, 0xc8, 0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 0x02, 0x10, 0x00,
  0x00, 0x02, 0x30, 0x00, 0x00, 0x03, 0x60, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0xc0, 0x00,
  0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char steak_icon [] PROGMEM = {
  // 'steak-icon, 32x32px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xfe, 0x00,
  0x00, 0xf0, 0x0f, 0x00, 0x01, 0xc0, 0x03, 0x80, 0x03, 0x80, 0x01, 0x80, 0x07, 0x00, 0x00, 0xc0,
  0x0e, 0x38, 0x00, 0xe0, 0x0e, 0x44, 0x00, 0x60, 0x0e, 0x44, 0x00, 0x70, 0x06, 0x44, 0x00, 0x70,
  0x07, 0x38, 0x18, 0x70, 0x03, 0x00, 0x60, 0x70, 0x03, 0x81, 0x80, 0x70, 0x01, 0x86, 0x0c, 0x70,
  0x01, 0xc8, 0x30, 0x30, 0x00, 0xc0, 0xc0, 0x30, 0x00, 0xc3, 0x06, 0x70, 0x00, 0xe4, 0x18, 0x60,
  0x00, 0x60, 0x60, 0x60, 0x00, 0x61, 0x80, 0xe0, 0x00, 0xc2, 0x00, 0xc0, 0x00, 0xc0, 0x01, 0xc0,
  0x00, 0xc0, 0x03, 0x80, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0x1e, 0x00, 0x00, 0x60, 0x7c, 0x00,
  0x00, 0x3f, 0xf0, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char poop_1 [] PROGMEM = {
  // 12x12px
  0x02, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x19, 0x00, 0x3d, 0x00, 0x63, 0x80, 0x40, 0xc0, 0x60, 0x40,
  0x7f, 0xe0, 0xc0, 0x30, 0xc0, 0x30, 0x7f, 0xe0
};
const unsigned char fly [] PROGMEM = {
  // 6x5px
  0x84, 0x48, 0x30, 0x78, 0x60
};
const unsigned char syringe [] PROGMEM = {
	// 12x3px
  0xbf, 0x00, 0xe7, 0xf0, 0xbf, 0x00
};

const unsigned char vitamins [] PROGMEM = {
  // 12x11px
	0x7f, 0xe0, 0x3f, 0xc0, 0x7f, 0xe0, 0x40, 0x20, 0x7f, 0xe0, 0x55, 0x60, 0x6a, 0xa0, 0x55, 0x60, 
	0x7f, 0xe0, 0x40, 0x20, 0x3f, 0xc0
};

const unsigned char syringe_icon [] PROGMEM = {
  // 32x32px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x7d, 0xc0, 0x00, 0x00, 0x4f, 0x60, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00,
  0x0c, 0x18, 0x00, 0x00, 0x08, 0x0c, 0x00, 0x00, 0x0c, 0x06, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00,
  0x03, 0x05, 0x80, 0x00, 0x01, 0x8a, 0xc0, 0x00, 0x00, 0xd5, 0x60, 0x00, 0x00, 0x6a, 0xb0, 0x00,
  0x00, 0x35, 0x58, 0x00, 0x0e, 0x1a, 0xac, 0x00, 0x0e, 0x0d, 0x56, 0x00, 0x0a, 0x06, 0xab, 0x00,
  0x11, 0x03, 0x55, 0x00, 0x20, 0x81, 0xab, 0x00, 0x20, 0x80, 0xd7, 0x00, 0x20, 0x80, 0x6e, 0x00,
  0x31, 0x80, 0x3d, 0x00, 0x3f, 0x80, 0x00, 0x80, 0x3f, 0x80, 0x00, 0x40, 0x2e, 0x80, 0x00, 0x20,
  0x20, 0x80, 0x00, 0x10, 0x11, 0x00, 0x00, 0x08, 0x0e, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00
};
const unsigned char vitamins_icon [] PROGMEM = {
  // 32x32px
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf8, 0x40, 0x00, 0x00, 0x08,
  0x38, 0x00, 0x00, 0x70, 0x08, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x40, 0x1f, 0xff, 0xff, 0xe0,
  0x20, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x08, 0x7f, 0xff, 0xff, 0xf8,
  0x40, 0x00, 0x00, 0x08, 0x40, 0x00, 0x07, 0x08, 0x5c, 0x00, 0x0f, 0x88, 0x52, 0x88, 0x1e, 0xc8,
  0x52, 0x50, 0x3f, 0x48, 0x5c, 0x20, 0x7e, 0xc8, 0x54, 0x50, 0xbd, 0x88, 0x52, 0x89, 0x1b, 0x08,
  0x40, 0x02, 0x0e, 0x08, 0x40, 0x04, 0x04, 0x08, 0x40, 0x04, 0x28, 0x08, 0x40, 0x04, 0x50, 0x08,
  0x40, 0x02, 0x20, 0x08, 0x40, 0x01, 0xc0, 0x08, 0x40, 0x00, 0x00, 0x08, 0x7f, 0xff, 0xff, 0xf8,
  0x40, 0x00, 0x00, 0x08, 0x40, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x10, 0x1f, 0xff, 0xff, 0xe0
};

const int leftBtn = 4;
const int rightBtn = 5;
const int selectBtn = 6;
const int backBtn = 7;
const int systemDelay = 150;

unsigned long previousAnimationMillis = 0;
const int animationDelay = 167;
int currentFrame = 0;

unsigned long previousHungerLvlMillis = 0;
unsigned long previousPooLvlMillis = 0;
unsigned long previousSleepLvlMillis = 0;

unsigned long previousSystemDelayMillis = 0;
int systemDelayInterval = 300;
bool buttonCooldown = false;

unsigned long hungerLvlInterval = 10000UL;
unsigned long pooLvlInterval = 2000UL;
unsigned long happinessLvlInterval = 3000UL;
unsigned long sleepLvlInterval = 10000UL;

const int optionsLength = 7;
String options[optionsLength] = {"feed", "poo", "play", "doctor", "sleep", "stats", "time"};
int currentOption = 5;

bool atHome = true;
bool asleep = false;

const int foodOptionsLegnth = 4;
String foodOptions[foodOptionsLegnth] = {"pear", "cookie", "pizza", "steak"};
int currentFoodOption = 0;

const int healthOptionsLegnth = 2;
String healthOptions[healthOptionsLegnth] = {"vitamins", "syringe"};
int currentHealthOption = 0;

int leftButtonState = 0;
int rightButtonState = 0;
int selectButtonState = 0;
int backButtonState = 0;

int hungerLvl = 1;
int pooLvl = 1;
int happinessLvl = 3;
int sleepLvl = 2;
int healthLvl = 4;

int poopTotal = 0;
int poopPosition[6];
int flyPosition[4];

void setup() {

  randomSeed(analogRead(0));
  poopPosition[0] = getRandomNumber(4, 10);
  poopPosition[1] = getRandomNumber(22, 28);
  poopPosition[2] = getRandomNumber(40, 48);
  poopPosition[3] = getRandomNumber(86, 95);
  poopPosition[4] = getRandomNumber(86, 95);
  poopPosition[5] = getRandomNumber(86, 95);

  flyPosition[0] = getRandomNumber(4, 24);
  flyPosition[1] = getRandomNumber(29, 48);
  flyPosition[2] = getRandomNumber(26, 36);
  flyPosition[3] = getRandomNumber(26, 36);

  Serial.begin(9600);
  pinMode(leftBtn, INPUT_PULLUP);
  pinMode(rightBtn, INPUT_PULLUP);
  pinMode(selectBtn, INPUT_PULLUP);
  pinMode(backBtn, INPUT_PULLUP);

  delay(500); // wait for the OLED to power up
  display.begin(i2c_Address, true); // Address 0x3C default
  display.setContrast (0); // dim display
  display.setRotation(1);
  display.setTextColor(SH110X_WHITE);
  display.setTextSize(1);

  display.clearDisplay();
  display.display();

  renderSplashScreen();
  delay(10000);

  renderHome();

}

void loop() {
  
  unsigned long hungerMillis = millis();
  unsigned long pooMillis = millis();
  unsigned long sleepMillis = millis();
  unsigned long animationMillis = millis();
  unsigned long systemDelayMillis = millis();

  if (systemDelayMillis - previousSystemDelayMillis >= systemDelayInterval) {
    previousSystemDelayMillis = systemDelayMillis; // Reset the timer

    buttonCooldown = false;
  }

  if (hungerMillis - previousHungerLvlMillis >= hungerLvlInterval) {
    previousHungerLvlMillis = hungerMillis; // Reset the timer

    if (hungerLvl < 4) {
      hungerLvl++;
    }
  }

  if (pooMillis - previousPooLvlMillis >= pooLvlInterval) {
    previousPooLvlMillis = pooMillis; // Reset the timer

    if (pooLvl < 5) {
      pooLvl++;
    }
    if (pooLvl >= 5) {
      // he shid"
      healthLvl--;
      pooLvl = 0;
      if (poopTotal < 3) {
        poopTotal++;
      }
    }
  }

  if (sleepMillis - previousSleepLvlMillis >= sleepLvlInterval) {
    previousSleepLvlMillis = sleepMillis; // Reset the timer

    if (sleepLvl < 4) {
      sleepLvl++;
    }
  }

  if (animationMillis - previousAnimationMillis >= animationDelay) {
    previousAnimationMillis = animationMillis; // Reset the timer

    currentFrame++;

    if(currentFrame > 3){
      currentFrame = 0;
    }
  }

  leftButtonState = digitalRead(leftBtn);
  rightButtonState = digitalRead(rightBtn);
  selectButtonState = digitalRead(selectBtn);
  backButtonState = digitalRead(backBtn);

  if (backButtonState == LOW) {
    if (atHome == false) {
      atHome = true;
      renderHome();
    }
    delay(systemDelay);
  }

  if (leftButtonState == LOW && atHome == true && buttonCooldown == false) {
    buttonCooldown = true;
    previousSystemDelayMillis = systemDelayMillis;
    currentOption--;
    if (currentOption < 0) {
      currentOption = optionsLength - 1;
    }
    renderHome();
  }
  if (leftButtonState == LOW && options[currentOption] == "feed" && atHome == false) {
    currentFoodOption--;
    if (currentFoodOption < 0) {
      currentFoodOption = foodOptionsLegnth - 1;
    }
    feed();
    delay(systemDelay);
  }

  if (leftButtonState == LOW && options[currentOption] == "doctor" && atHome == false) {
    currentHealthOption--;
    if (currentHealthOption < 0) {
      currentHealthOption = healthOptionsLegnth - 1;
    }
    doctor();
    delay(systemDelay);
  }

  if (rightButtonState == LOW && atHome == true && buttonCooldown == false) {
    buttonCooldown = true;
    previousSystemDelayMillis = systemDelayMillis;
    currentOption++;
    if (currentOption > optionsLength - 1) {
      currentOption = 0;
    }
    renderHome();
  }
  if (rightButtonState == LOW && options[currentOption] == "feed" && atHome == false) {
    currentFoodOption++;
    if (currentFoodOption > foodOptionsLegnth - 1) {
      currentFoodOption = 0;
    }
    feed();
    delay(systemDelay);
  }

  if (rightButtonState == LOW && options[currentOption] == "doctor" && atHome == false) {
    currentHealthOption++;
    if (currentHealthOption > healthOptionsLegnth - 1) {
      currentHealthOption = 0;
    }
    doctor();
    delay(systemDelay);
  }

  if (selectButtonState == LOW && atHome == false && foodOptions[currentFoodOption] == "pear" && options[currentOption] == "feed") {
    hungerLvl--;
    feed();
    delay(600);
    atHome = true;
    renderHome();
    delay(systemDelay);
  }
  if (selectButtonState == LOW && atHome == false && foodOptions[currentFoodOption] == "cookie" && options[currentOption] == "feed") {
    hungerLvl--;
    feed();
    delay(600);
    atHome = true;
    renderHome();
    delay(systemDelay);
  }
  if (selectButtonState == LOW && atHome == false && foodOptions[currentFoodOption] == "pizza" && options[currentOption] == "feed") {
    hungerLvl--;
    hungerLvl--;
    feed();
    delay(600);
    atHome = true;
    renderHome();
    delay(systemDelay);
  }
  if (selectButtonState == LOW && atHome == false && foodOptions[currentFoodOption] == "steak" && options[currentOption] == "feed") {
    hungerLvl--;
    hungerLvl--;
    feed();
    delay(600);
    atHome = true;
    renderHome();
    delay(systemDelay);
  }
  if (selectButtonState == LOW && atHome == false && healthOptions[currentHealthOption] == "vitamins" && options[currentOption] == "doctor") {
    healthLvl++;
    doctor();
    delay(600);
    atHome = true;
    renderHome();
    delay(systemDelay);
  }
  if (selectButtonState == LOW && atHome == false && healthOptions[currentHealthOption] == "syringe" && options[currentOption] == "doctor") {
    healthLvl++;
    healthLvl++;
    doctor();
    delay(600);
    atHome = true;
    renderHome();
    delay(systemDelay);
  }


  if (digitalRead(selectBtn) == LOW && asleep == true && atHome == false) {
    asleep = false;
    renderHome();
  }

  selectButtonState = digitalRead(selectBtn);

  if (selectButtonState == LOW && atHome == true) {
    String selectedOption = options[currentOption];
    if (selectedOption == "feed") {
      atHome = false;
      feed();
    }
    if (selectedOption == "poo") {
      if (poopTotal > 0) {
        poopTotal--;
        renderHome();
      } else {
        atHome = false;
        poo();
      }
    }
    if (selectedOption == "play") {
      atHome = false;
      play();
    }
    if (selectedOption == "sleep") {
      asleep = true;
      atHome = false;
      sleep();
    }
    if (selectedOption == "doctor") {
      atHome = false;
      doctor();
    }
    if (selectedOption == "stats") {
      atHome = false;
      stats();
    }
    if (selectedOption == "time") {
      atHome = false;
      setTime();
    }
    delay(systemDelay);
  }

  if (hungerLvl < 0) {
    hungerLvl = 0;
  }
  if (happinessLvl < 0) {
    happinessLvl = 0;
  }

  if (atHome == true) {
    renderHome();
  }

  if (options[currentOption] == "feed" && atHome == false) {
    feed();
  }
  if (options[currentOption] == "stats" && atHome == false) {
    stats();
  }
  if (options[currentOption] == "doctor" && atHome == false) {
    doctor();
  }
  if (options[currentOption] == "sleep" && atHome == false) {
    sleep();
  }
  if (options[currentOption] == "play" && atHome == false) {
    play();
  }

  Serial.print("left btn state: ");
  Serial.println(leftButtonState);

}

void renderSplashScreen() {
  display.clearDisplay();
  display.drawBitmap(0, 0,  splash_screen, 64, 128, 1);
  display.display();
}

void renderStatBar(int xPos, int yPos, int needLvl) {
  display.drawBitmap(xPos, yPos,  stat_bar, 53, 9, 1);
  if (needLvl >= 1) {
    display.drawBitmap((xPos + 4), (yPos + 3),  stat_bar_full, 9, 3, 1);
  }
  if (needLvl >= 2) {
    display.drawBitmap((xPos + 16), (yPos + 3),  stat_bar_full, 9, 3, 1);
  }
  if (needLvl >= 3) {
    display.drawBitmap((xPos + 28), (yPos + 3),  stat_bar_full, 9, 3, 1);
  }
  if (needLvl >= 4) {
    display.drawBitmap((xPos + 40), (yPos + 3),  stat_bar_full, 9, 3, 1);
  }
}

void feed() {
  display.clearDisplay();

  display.setCursor(14 , 8);
  display.print("hunger");

  renderStatBar(5, 22, hungerLvl);

  display.drawBitmap(4, 60,  left_icon, 4, 8, 1);
  display.drawBitmap(54, 60,  right_icon, 4, 8, 1);

  if (currentFoodOption == 0) {
    display.drawBitmap(14, 46,  pear_icon, 32, 32, 1);
    display.setCursor(19 , 94);
    display.print("pear");
    display.setCursor(24 , 108);
    display.print("+1");
  }
  if (currentFoodOption == 1) {
    display.drawBitmap(14, 48,  cookie_icon, 32, 32, 1);
    display.setCursor(14 , 94);
    display.print("cookie");
    display.setCursor(24 , 108);
    display.print("+1");
  }
  if (currentFoodOption == 2) {
    display.drawBitmap(14, 47,  pizza_icon, 32, 32, 1);
    display.setCursor(18 , 94);
    display.print("pizza");
    display.setCursor(24 , 108);
    display.print("+2");
  }
  if (currentFoodOption == 3) {
    display.drawBitmap(14, 46,  steak_icon, 32, 32, 1);
    display.setCursor(18 , 94);
    display.print("steak");
    display.setCursor(24 , 108);
    display.print("+2");
  }

  display.display();
}

void poo() {
  display.clearDisplay();
  display.display();
  pooLvl = 0;
  // lower poo variable
  // animation of water washing over screen
  // remove poo from home screen if present
  // return home
  delay(1000);
  atHome = true;
  renderHome();
}

void play() {
  if (happinessLvl < 0) {
    happinessLvl = 0;
  }
  if (happinessLvl > 4) {
    happinessLvl = 4;
  }

  display.clearDisplay();

  display.setCursor(14 , 8);
  display.print("happy");

  renderStatBar(5, 22, happinessLvl);

  if (healthOptions[currentHealthOption] == "vitamins") {
    display.drawBitmap(16, 47,  vitamins_icon, 32, 32, 1);
    display.setCursor(8 , 94);
    display.print("vitamins");
    display.setCursor(24 , 108);
    display.print("+1");
  }

  if (healthOptions[currentHealthOption] == "syringe") {
    display.drawBitmap(16, 47,  syringe_icon, 32, 32, 1);
    display.setCursor(11 , 94);
    display.print("syringe");
    display.setCursor(24 , 108);
    display.print("+2");
  }

  display.drawBitmap(4, 60,  left_icon, 4, 8, 1);
  display.drawBitmap(54, 60,  right_icon, 4, 8, 1);

  display.display();
}

void doctor() {

  if (healthLvl < 0) {
    healthLvl = 0;
  }
  if (healthLvl > 4) {
    healthLvl = 0;
  }

  display.clearDisplay();

  display.setCursor(14 , 8);
  display.print("health");

  renderStatBar(5, 22, healthLvl);

  if (healthOptions[currentHealthOption] == "vitamins") {
    display.drawBitmap(16, 47,  vitamins_icon, 32, 32, 1);
    display.setCursor(8 , 94);
    display.print("vitamins");
    display.setCursor(24 , 108);
    display.print("+1");
  }

  if (healthOptions[currentHealthOption] == "syringe") {
    display.drawBitmap(16, 47,  syringe_icon, 32, 32, 1);
    display.setCursor(11 , 94);
    display.print("syringe");
    display.setCursor(24 , 108);
    display.print("+2");
  }

  display.drawBitmap(4, 60,  left_icon, 4, 8, 1);
  display.drawBitmap(54, 60,  right_icon, 4, 8, 1);

  display.display();
}

void sleep() {
  display.clearDisplay();
  display.display();
  delay(systemDelay);
}

void stats() {
  display.clearDisplay();

  // display.drawRect(5, 26, 54, 1, SH110X_WHITE);
  // display.drawRect(5, 51, 54, 1, SH110X_WHITE);
  // display.drawRect(5, 76, 54, 1, SH110X_WHITE);
  // display.drawRect(5, 101, 54, 1, SH110X_WHITE);

  display.drawBitmap(4, 2,  food_icon, 12, 12, 1);
  display.drawBitmap(4, 27,  poo_icon, 12, 12, 1);
  display.drawBitmap(4, 52,  play_icon, 12, 12, 1);
  display.drawBitmap(4, 77,  doctor_icon, 12, 12, 1);
  display.drawBitmap(4, 102,  sleep_icon, 12, 12, 1);

  display.setCursor(17 , 6);
  display.print("hunger");
  display.setCursor(17 , 31);
  display.print("poo");
  display.setCursor(17 , 56);
  display.print("happy");
  display.setCursor(17 , 81);
  display.print("health");
  display.setCursor(17 , 106);
  display.print("sleepy");


  renderStatBar(5, 15, hungerLvl);
  renderStatBar(5, 40, pooLvl);
  renderStatBar(5, 65, happinessLvl);
  renderStatBar(5, 90, healthLvl);
  renderStatBar(5, 115, sleepLvl);

  display.display();
}

void setTime() {

}

void renderHome() {
  display.clearDisplay();

  if(currentFrame == 0){
    display.drawBitmap(16, 48,  devil_bounce_0, 32, 32, 1);
  }
  if(currentFrame == 1){
    display.drawBitmap(16, 48,  devil_bounce_1, 32, 32, 1);
  }
  if(currentFrame == 2){
    display.drawBitmap(16, 48,  devil_bounce_2, 32, 32, 1);
  }
  if(currentFrame == 3){
    display.drawBitmap(16, 48,  devil_bounce_1, 32, 32, 1);
  }

  // display.drawBitmap(14 , 48,  devil, 32, 32, 1);
  display.drawBitmap(2, 4,  food_icon, 12, 12, 1);
  display.drawBitmap(18, 4,  poo_icon, 12, 12, 1);
  display.drawBitmap(34, 4,  play_icon, 12, 12, 1);
  display.drawBitmap(49, 4,  doctor_icon, 12, 12, 1);
  display.drawBitmap(8, 110,  sleep_icon, 12, 12, 1);
  display.drawBitmap(26, 110,  stats_icon, 12, 12, 1);
  display.drawBitmap(45, 110,  clock_icon, 12, 12, 1);

  if (options[currentOption] == "feed") {
    display.drawRect(3, 16, 10, 2, SH110X_WHITE);
  }
  if (options[currentOption] == "poo") {
    display.drawRect(19, 16, 10, 2, SH110X_WHITE);
  }
  if (options[currentOption] == "play") {
    display.drawRect(35, 16, 10, 2, SH110X_WHITE);
  }
  if (options[currentOption] == "doctor") {
    display.drawRect(51, 16, 10, 2, SH110X_WHITE);
  }
  if (options[currentOption] == "sleep") {
    display.drawRect(9, 122, 10, 2, SH110X_WHITE);
  }
  if (options[currentOption] == "stats") {
    display.drawRect(27, 122, 10, 2, SH110X_WHITE);
  }
  if (options[currentOption] == "time") {
    display.drawRect(46, 122, 10, 2, SH110X_WHITE);
  }

  if (poopTotal > 0) {
    display.drawBitmap(poopPosition[0], poopPosition[3],  poop_1, 12, 12, 1);
  }
  if (poopTotal > 1) {
    display.drawBitmap(poopPosition[1], poopPosition[4],  poop_1, 12, 12, 1);
    display.drawBitmap(flyPosition[0] , flyPosition[2],  fly, 6, 5, 1);
  }
  if (poopTotal > 2) {
    display.drawBitmap(poopPosition[2], poopPosition[5],  poop_1, 12, 12, 1);
    display.drawBitmap(flyPosition[1] , flyPosition[3],  fly, 6, 5, 1);
  }

  display.drawBitmap(2 , 54,  syringe, 12, 3, 1);
  // display.drawBitmap(2 , 68,  vitamins, 12, 11, 1);
  

  display.display();
}

int getRandomNumber(int minVal, int maxVal) {
  return random(minVal, maxVal + 1);  // maxValue + 1 to include maxValue in the range
}
