#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

#define i2c_Address 0x3c

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET -1   //   QT-PY / XIAO
Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 6 fps - 167
int previousAnimationMillis = 0;
const int animationDelay = 167;

int currentFrame = 0;

const unsigned char devil [] PROGMEM = {
  // 32x32
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x70, 0x1c, 0x00, 
	0x00, 0xc0, 0x03, 0x00, 0x03, 0x00, 0x01, 0x80, 0x06, 0x00, 0x00, 0x40, 0x0c, 0x1e, 0x00, 0x20, 
	0x0c, 0x21, 0x00, 0x20, 0x18, 0x21, 0x0c, 0x10, 0x18, 0x21, 0x12, 0x10, 0x30, 0x21, 0x12, 0x08, 
	0x30, 0x1e, 0x0c, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x18, 0x2a, 0x80, 0x10, 
	0x18, 0x7f, 0xc0, 0x10, 0x0c, 0x2a, 0x80, 0x20, 0x0c, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00, 0x40, 
	0x03, 0x00, 0x01, 0x80, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x70, 0x1c, 0x00, 0x00, 0x0f, 0xf0, 0x00
};
const unsigned char devil_bounce_0 [] PROGMEM = {
  // 32x32
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x01, 0xc0, 0x0f, 0x00, 
	0x07, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x00, 0x60, 0x18, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x18, 
	0x70, 0x00, 0x00, 0x08, 0x60, 0x21, 0x0c, 0x0c, 0xe0, 0x1e, 0x12, 0x04, 0xc0, 0x21, 0x12, 0x06, 
	0xc0, 0x00, 0x0c, 0x02, 0xc0, 0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0x06, 0xe0, 0x00, 0x00, 0x04, 
	0x60, 0x00, 0x00, 0x0c, 0x70, 0x2a, 0x80, 0x08, 0x30, 0x7f, 0xc0, 0x18, 0x18, 0x2a, 0x80, 0x30, 
	0x0c, 0x00, 0x00, 0x60, 0x07, 0x00, 0x01, 0xc0, 0x01, 0xc0, 0x0f, 0x00, 0x00, 0x3f, 0xfc, 0x00
};
const unsigned char devil_bounce_1 [] PROGMEM = {
  // 32x32
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x70, 0x1c, 0x00, 
	0x00, 0xc0, 0x03, 0x00, 0x01, 0x00, 0x01, 0x80, 0x02, 0x00, 0x00, 0xc0, 0x04, 0x1e, 0x00, 0x60, 
	0x0c, 0x21, 0x00, 0x20, 0x18, 0x21, 0x0c, 0x10, 0x18, 0x21, 0x12, 0x10, 0x10, 0x21, 0x12, 0x18, 
	0x30, 0x1e, 0x0c, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 
	0x10, 0x2a, 0x80, 0x18, 0x18, 0x7f, 0xc0, 0x10, 0x18, 0x2a, 0x80, 0x10, 0x0c, 0x00, 0x00, 0x20, 
	0x04, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x01, 0x80, 0x00, 0xc0, 0x03, 0x00, 
	0x00, 0x70, 0x1c, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
const unsigned char devil_bounce_2 [] PROGMEM = {
  // 32x32
  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x70, 0x1c, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x03, 0x00, 0x01, 0x80, 
	0x06, 0x00, 0x00, 0x40, 0x0c, 0x1e, 0x00, 0x20, 0x0c, 0x21, 0x00, 0x20, 0x18, 0x21, 0x0c, 0x10, 
	0x18, 0x21, 0x12, 0x10, 0x30, 0x21, 0x12, 0x08, 0x30, 0x1e, 0x0c, 0x08, 0x30, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x08, 
	0x30, 0x00, 0x00, 0x08, 0x18, 0x2a, 0x80, 0x10, 0x18, 0x7f, 0xc0, 0x10, 0x0c, 0x2a, 0x80, 0x20, 
	0x0c, 0x00, 0x00, 0x20, 0x06, 0x00, 0x00, 0x40, 0x03, 0x00, 0x01, 0x80, 0x00, 0xc0, 0x03, 0x00, 
	0x00, 0x70, 0x1c, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {
  Serial.begin(9600);

  delay(250); // wait for the OLED to power up
  display.begin(i2c_Address, true); // Address 0x3C default
  display.setContrast(0); // dim display
  display.setRotation(1);
  display.setTextColor(SH110X_WHITE);
  display.setTextSize(1);

  display.clearDisplay();
  display.display();
}

void loop() {

  unsigned long animationMillis = millis();

  if (animationMillis - previousAnimationMillis >= animationDelay) {
    previousAnimationMillis = animationMillis; // Reset the timer
    if(currentFrame > 3){
      currentFrame = 0;
    }
    if(currentFrame == 0){
      display.drawBitmap(16, 48,  devil_bounce_0, 32, 32, 1);
    }
    if(currentFrame == 1){
      display.drawBitmap(16, 48,  devil_bounce_1, 32, 32, 1);
    }
    if(currentFrame == 2){
      display.drawBitmap(16, 48,  devil_bounce_2, 32, 32, 1);
    }
    if(currentFrame == 3){
      display.drawBitmap(16, 48,  devil_bounce_1, 32, 32, 1);
    }
    currentFrame++;
  }
}
